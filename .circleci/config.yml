# CircleCI v2.1 Config
version: 2.1

##
# orbs
#
# Orbs used in this pipeline
###
orbs:
  anchore: anchore/anchore-engine@1.6.0
  slack: circleci/slack@3.4.2

##
# defaults
#
# YAML defaults templates, in alphabetical order
##
defaults_Dependencies: &defaults_Dependencies |
  apk --no-cache add git
  apk --no-cache add ca-certificates
  apk --no-cache add curl
  apk --no-cache add openssh-client
  apk --no-cache add bash
  # Required for plantuml dependencies
  apk --no-cache add openjdk11
  apk add --no-cache -t build-dependencies make gcc g++ python libtool autoconf automake
  npm config set unsafe-perm true
  npm install -g node-gyp

defaults_awsCliDependencies: &defaults_awsCliDependencies |
  apk upgrade --no-cache
  apk --no-cache add \
          python3 \
          py3-pip \
          groff \
          less \
          mailcap
  pip3 install --upgrade pip awscli==1.14.5 s3cmd==2.0.1 python-magic

##
# Executors
#
# CircleCI Executors
##
executors:
  default-docker:
    working_directory: /home/circleci/project
    docker:
      - image: node:12.16.0-alpine

  default-machine:
    machine:
      image: ubuntu-1604:201903-01

##
# Jobs
#
# A map of CircleCI jobs
##
jobs:
  setup:
    executor: default-docker
    steps:
      - checkout
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - run:
          name: Access npm folder as root
          command: cd $(npm root -g)/npm
      - run:
          name: Update NPM install
          command: npm ci
      - run:
          name: Delete build dependencies
          command: apk del build-dependencies
      - save_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
          paths:
            - node_modules

  test-e2e:
    executor: default-machine
    steps:
      - checkout
      - restore_cache:
          keys:
            - dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Make a test output file
          command: |
            mkdir -p /tmp/test/results
      - run:
          name: Add /etc/hosts entries
          command: |
            sudo ./scripts/_setup_hosts_file.sh
      - run:
          name: Set up nvm
          command: |
            echo ${NVM_DIR}
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm install v12.16.1
            nvm alias default v12.16.1
      - run:
          name: build any containers that need building
          command: |
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            cd ./docker-local/
            docker-compose build
      - run:
          name: Spin up the E2E test environment
          command: |
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            cd ./docker-local/
            docker-compose pull

            # Start the services piecemeal to not overwhelm circleci
            docker-compose up -d account-lookup-service simulator
            sleep 30
            docker-compose up -d central-ledger
            sleep 10
            docker-compose up -d als-consent-oracle
            sleep 10
            docker-compose up -d auth-service
            sleep 10
            docker-compose up -d central-settlement
            sleep 10
            docker-compose up -d dfspa-sdk-scheme-adapter dfspa-thirdparty-scheme-adapter-inbound dfspa-thirdparty-scheme-adapter-outbound
            sleep 10
            docker-compose up -d dfspb-sdk-scheme-adapter dfspb-thirdparty-scheme-adapter-inbound dfspb-thirdparty-scheme-adapter-outbound
            sleep 10
            docker-compose up -d login-flow-simulator-ui login-flow-simulator
            sleep 10
            docker-compose up -d ml-api-adapter
            sleep 10
            docker-compose up -d thirdparty-api-svc
            sleep 10
            docker-compose up -d quoting-service
            sleep 10
            docker-compose up -d pisp-sdk-scheme-adapter pisp-redis pisp-thirdparty-scheme-adapter-inbound pisp-backend pisp-thirdparty-scheme-adapter-outbound
            sleep 10

            # everything else
            docker-compose up -d

            # Check straight away to see if any containers have exited
            docker-compose ps

            # wait for services to be up and running
            npm run wait-4-docker

            # seed the environment
            npm run reseed:docker-local
          no_output_timeout: 20m
      - run:
          name: Run the E2E tests
          command: |
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            npm run test:e2e -- --reporters=default --reporters=jest-junit
      - run:
          name: prepare test results
          command: |
            mv junit.xml /tmp/test/results
      - store_artifacts:
          path: /tmp/test/results
          prefix: test
      - store_test_results:
          path: /tmp/test/results

  test-contract:
    executor: default-machine
    steps:
      - checkout
      - restore_cache:
          keys:
            - dependency-cache-{{ checksum "package-lock.json" }}
      # TODO: set up /etc/hosts!
      - run:
          name: Add /etc/hosts entries
          command: |
            sudo ./scripts/_setup_hosts_file.sh
      - run:
          name: Set up nvm
          command: |
            echo ${NVM_DIR}
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm install v12.16.1
            nvm alias default v12.16.1
      - run:
          name: Spin up the contract test environment
          command: |
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            cd ./docker-contract/
            docker-compose pull
            docker-compose up -d

            # wait for services to be up and running
            npm run wait-4-docker-contract

            # seed the environment
            npm run reseed:docker-contract

            sleep 45s
      - run:
          name: Run the contract tests
          command: |
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            npm run test:contract -- --reporters=default --reporters=jest-junit
      - run:
          name: prepare test/results
          command: |
            mkdir -p test/results
            mv junit.xml test/results
      - store_artifacts:
          path: ./test/results
          prefix: test
      - store_test_results:
          path: ./test/results

  test-docs:
    executor: default-machine
    steps:
      - checkout
      - run:
          name: Set up NVM
          command: |
            echo ${NVM_DIR}
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm install v12.16.1
            nvm alias default v12.16.1
            node --version
            npm ci
      - run:
          name: Check if plantuml has been updated correctly
          command: |
            set +o pipefail
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            npm run build:plantuml:all
            FILE_COUNT=$(git diff --cached --name-only | grep .svg | wc -l)
            if [ ${FILE_COUNT} -ne "0" ]; then
              echo 'Plantuml files are out of sync. Please run npm run build:plantuml and try again.';
              exit 1;
            else
              echo 'Plantuml files are up to date';
            fi

##
# Workflows
#
# CircleCI Workflow config
##
workflows:
  version: 2
  build_and_test:
    jobs:
      - setup:
          context: org-global
          filters:
            tags:
              only: /.*/
            # TODO re-gnore when we're done with this setup
            branches:
              ignore:
                - /feature*/
                - /bugfix*/
      - test-e2e:
          context: org-global
          requires:
            - setup
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /feature*/
                - /bugfix*/
      - test-contract:
          context: org-global
          requires:
            - setup
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /feature*/
                - /bugfix*/
      - test-docs:
          context: org-global
          requires:
            - setup
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /feature*/
                - /bugfix*/

