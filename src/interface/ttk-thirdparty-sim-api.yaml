openapi: 3.0.2
info:
  title: Mojaloop Thirdparty & DFSP Simulator API
  version: '1.0'
  description: A Mojaloop API that will simulate the out of bound user authentication (OTP or WEB) between a DFSP/PISP and their user
  license:
    name: TBD
    url: TBD
servers:
  - url: /
paths:
  /login:
    post:
      tags:
        - DFSPSim
      description: The HTTP request `POST /login` is used to login to DFSP application by providing credentials.
      summary: DFSP user login
      operationId: DFSPLogin
      parameters:
        - name: Accept
          in: header
          required: true
          schema:
            type: string
          description: The `Accept` header field indicates the version of the API the client would like the server to use.
        - name: Content-Length
          in: header
          required: false
          schema:
            type: integer
          description: |-
            The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.

            **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes).
        - name: Content-Type
          in: header
          schema:
            type: string
          required: true
          description: The `Content-Type` header indicates the specific version of the API used to send the payload body.
        - $ref: '#/paths/~1store~1consentRequests~1%7BID%7D/parameters/1'
        - name: userName
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/UserName'
        - name: password
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Password'
      requestBody:
        required: false
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/DFSPLoginRequest'
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                title: ErrorInformationResponse
                type: object
                description: Data model for the complex type object that contains an optional element ErrorInformation used along with 4xx and 5xx responses.
                properties:
                  errorInformation:
                    title: ErrorInformation
                    type: object
                    description: Data model for the complex type ErrorInformation.
                    properties:
                      errorCode:
                        title: ErrorCode
                        type: string
                        pattern: '^[1-9]\d{3}$'
                        description: 'The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.'
                        example: '5100'
                      errorDescription:
                        title: ErrorDescription
                        type: string
                        minLength: 1
                        maxLength: 128
                        description: Error description string.
                      extensionList:
                        title: ExtensionList
                        type: object
                        description: 'Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.'
                        properties:
                          extension:
                            type: array
                            items:
                              title: Extension
                              type: object
                              description: Data model for the complex type Extension.
                              properties:
                                key:
                                  title: ExtensionKey
                                  type: string
                                  minLength: 1
                                  maxLength: 32
                                  description: Extension key.
                                value:
                                  title: ExtensionValue
                                  type: string
                                  minLength: 1
                                  maxLength: 128
                                  description: Extension value.
                              required:
                                - key
                                - value
                            minItems: 1
                            maxItems: 16
                            description: Number of Extension elements.
                        required:
                          - extension
                    required:
                      - errorCode
                      - errorDescription
          headers:
            Content-Length:
              required: false
              schema:
                type: integer
              description: |-
                The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.

                **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes).
            Content-Type:
              schema:
                type: string
              required: true
              description: The `Content-Type` header indicates the specific version of the API used to send the payload body.
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/paths/~1login/post/responses/400/content/application~1json/schema'
          headers:
            Content-Length:
              $ref: '#/paths/~1login/post/responses/400/headers/Content-Length'
            Content-Type:
              $ref: '#/paths/~1login/post/responses/400/headers/Content-Type'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/paths/~1login/post/responses/400/content/application~1json/schema'
          headers:
            Content-Length:
              $ref: '#/paths/~1login/post/responses/400/headers/Content-Length'
            Content-Type:
              $ref: '#/paths/~1login/post/responses/400/headers/Content-Type'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/paths/~1login/post/responses/400/content/application~1json/schema'
          headers:
            Content-Length:
              $ref: '#/paths/~1login/post/responses/400/headers/Content-Length'
            Content-Type:
              $ref: '#/paths/~1login/post/responses/400/headers/Content-Type'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/paths/~1login/post/responses/400/content/application~1json/schema'
          headers:
            Content-Length:
              $ref: '#/paths/~1login/post/responses/400/headers/Content-Length'
            Content-Type:
              $ref: '#/paths/~1login/post/responses/400/headers/Content-Type'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/paths/~1login/post/responses/400/content/application~1json/schema'
          headers:
            Content-Length:
              $ref: '#/paths/~1login/post/responses/400/headers/Content-Length'
            Content-Type:
              $ref: '#/paths/~1login/post/responses/400/headers/Content-Type'
        '501':
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/paths/~1login/post/responses/400/content/application~1json/schema'
          headers:
            Content-Length:
              $ref: '#/paths/~1login/post/responses/400/headers/Content-Length'
            Content-Type:
              $ref: '#/paths/~1login/post/responses/400/headers/Content-Type'
        '503':
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/paths/~1login/post/responses/400/content/application~1json/schema'
          headers:
            Content-Length:
              $ref: '#/paths/~1login/post/responses/400/headers/Content-Length'
            Content-Type:
              $ref: '#/paths/~1login/post/responses/400/headers/Content-Type'
  /authorize:
    post:
      tags:
        - DFSPSim
      description: The HTTP request `POST /authorize` is used to grant consent by a DFSP user.
      summary: DFSP user authorization
      operationId: DFSPAuthorize
      parameters:
        - $ref: '#/paths/~1login/post/parameters/0'
        - $ref: '#/paths/~1login/post/parameters/1'
        - $ref: '#/paths/~1login/post/parameters/2'
        - $ref: '#/paths/~1store~1consentRequests~1%7BID%7D/parameters/1'
        - name: userId
          in: query
          required: true
          schema:
            type: array
            items:
              type: string
        - name: consentRequestId
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/SendOTPRequest/properties/consentRequestId'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DFSPAuthorizeRequest'
      responses:
        '200':
          description: Response containing secret
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DFSPAuthorizeResponse'
              example:
                secret: xx auth secret xx
        '400':
          $ref: '#/paths/~1login/post/responses/400'
        '401':
          $ref: '#/paths/~1login/post/responses/401'
        '403':
          $ref: '#/paths/~1login/post/responses/403'
        '404':
          $ref: '#/paths/~1login/post/responses/404'
        '405':
          $ref: '#/paths/~1login/post/responses/405'
        '406':
          $ref: '#/paths/~1login/post/responses/406'
        '501':
          $ref: '#/paths/~1login/post/responses/501'
        '503':
          $ref: '#/paths/~1login/post/responses/503'
  /sendOTP:
    post:
      tags:
        - DFSPSim
      description: The HTTP request `POST /sendOTP` is used to send OTP to a DFSP user (most likely through SMS).
      summary: DFSP Send OTP
      operationId: SendOTP
      parameters:
        - $ref: '#/paths/~1login/post/parameters/0'
        - $ref: '#/paths/~1login/post/parameters/1'
        - $ref: '#/paths/~1login/post/parameters/2'
        - $ref: '#/paths/~1store~1consentRequests~1%7BID%7D/parameters/1'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendOTPRequest'
            example:
              userName: dfspa.user.name
              consentRequestId: 3b346cec-47b3-4def-b870-edb255aaf6c3
              message: '9876'
      responses:
        '200':
          $ref: '#/paths/~1login/post/responses/200'
        '400':
          $ref: '#/paths/~1login/post/responses/400'
        '401':
          $ref: '#/paths/~1login/post/responses/401'
        '403':
          $ref: '#/paths/~1login/post/responses/403'
        '404':
          $ref: '#/paths/~1login/post/responses/404'
        '405':
          $ref: '#/paths/~1login/post/responses/405'
        '406':
          $ref: '#/paths/~1login/post/responses/406'
        '501':
          $ref: '#/paths/~1login/post/responses/501'
        '503':
          $ref: '#/paths/~1login/post/responses/503'
  /verifyOTPorSecret:
    post:
      tags:
        - DFSPSim
      description: The HTTP request `POST /verifyOTPorSecret` is used to verify OTP or Secret received from PISP.
      summary: /verifyOTPorSecret
      operationId: VerifyOTPorSecret
      parameters:
        - $ref: '#/paths/~1login/post/parameters/0'
        - $ref: '#/paths/~1login/post/parameters/1'
        - $ref: '#/paths/~1login/post/parameters/2'
        - $ref: '#/paths/~1store~1consentRequests~1%7BID%7D/parameters/1'
      requestBody:
        description: Perform verification of OTP or Secret
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyOTPorSecretRequest'
            examples:
              sample1:
                value:
                  consentRequestId: 3b346cec-47b3-4def-b870-edb255aaf6c3
                  value: '1234'
              sample2:
                value:
                  consentRequestId: 3b346cec-47b3-4def-b870-edb255aaf6c4
                  value: xx auth secret xx
      responses:
        '200':
          $ref: '#/paths/~1login/post/responses/200'
        '400':
          $ref: '#/paths/~1login/post/responses/400'
        '401':
          $ref: '#/paths/~1login/post/responses/401'
        '403':
          $ref: '#/paths/~1login/post/responses/403'
        '404':
          $ref: '#/paths/~1login/post/responses/404'
        '405':
          $ref: '#/paths/~1login/post/responses/405'
        '406':
          $ref: '#/paths/~1login/post/responses/406'
        '501':
          $ref: '#/paths/~1login/post/responses/501'
        '503':
          $ref: '#/paths/~1login/post/responses/503'
  '/OTPorSecret/{ID}':
    get:
      tags:
        - DFSPSim
      description: 'The HTTP request `GET /OTPorSecret/{ID}` is used to get OTP or Secret from DFSP.'
      summary: Get OTP or Secret for specified consentRequestId
      operationId: GetOTPorSecret
      parameters:
        - $ref: '#/paths/~1store~1consentRequests~1%7BID%7D/parameters/0'
        - $ref: '#/paths/~1store~1consentRequests~1%7BID%7D/parameters/1'
      responses:
        '200':
          description: Response containing details of the OTP or Secret
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOTPorSecretResponse'
              examples:
                sample1:
                  value:
                    value: '1234'
                sample2:
                  value:
                    value: xx auth secret xx
        '400':
          $ref: '#/paths/~1login/post/responses/400'
        '401':
          $ref: '#/paths/~1login/post/responses/401'
        '403':
          $ref: '#/paths/~1login/post/responses/403'
        '404':
          $ref: '#/paths/~1login/post/responses/404'
        '405':
          $ref: '#/paths/~1login/post/responses/405'
        '406':
          $ref: '#/paths/~1login/post/responses/406'
        '501':
          $ref: '#/paths/~1login/post/responses/501'
        '503':
          $ref: '#/paths/~1login/post/responses/503'
  '/store/consentRequests/{ID}':
    parameters:
      - name: ID
        in: path
        required: true
        schema:
          type: string
        description: The identifier value.
      - name: X-Forwarded-For
        in: header
        schema:
          type: string
        required: false
        description: |-
          The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.

          **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.
    get:
      tags:
        - DFSPSim
      operationId: GetConsentRequest
      summary: GetConsentRequest
      description: |
        The HTTP request `GET /store/consentRequests/{ID}` is used by DFSP to load a specified consentRequest.
      responses:
        '200':
          description: Response containing consentRequest details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreConsent'
              example:
                scopes:
                  - accountId: dfspa.username.1234
                    actions:
                      - accounts.transfer
                      - accounts.getBalance
                  - accountId: dfspa.username.5678
                    actions:
                      - accounts.transfer
                      - accounts.getBalance
        '400':
          $ref: '#/paths/~1login/post/responses/400'
        '401':
          $ref: '#/paths/~1login/post/responses/401'
        '403':
          $ref: '#/paths/~1login/post/responses/403'
        '404':
          $ref: '#/paths/~1login/post/responses/404'
        '405':
          $ref: '#/paths/~1login/post/responses/405'
        '406':
          $ref: '#/paths/~1login/post/responses/406'
        '501':
          $ref: '#/paths/~1login/post/responses/501'
        '503':
          $ref: '#/paths/~1login/post/responses/503'
    post:
      tags:
        - DFSPSim
      operationId: StoreConsentRequest
      summary: StoreConsentRequest
      description: |
        The HTTP request `POST /store/consentRequests/{ID}` is used by a DFSP to store consentRequests.
      requestBody:
        description: The consentRequest to store
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreConsent'
            example:
              scopes:
                - accountId: dfspa.username.1234
                  actions:
                    - accounts.transfer
                    - accounts.getBalance
                - accountId: dfspa.username.5678
                  actions:
                    - accounts.transfer
                    - accounts.getBalance
      responses:
        '200':
          $ref: '#/paths/~1login/post/responses/200'
        '400':
          $ref: '#/paths/~1login/post/responses/400'
        '401':
          $ref: '#/paths/~1login/post/responses/401'
        '403':
          $ref: '#/paths/~1login/post/responses/403'
        '404':
          $ref: '#/paths/~1login/post/responses/404'
        '405':
          $ref: '#/paths/~1login/post/responses/405'
        '406':
          $ref: '#/paths/~1login/post/responses/406'
        '501':
          $ref: '#/paths/~1login/post/responses/501'
        '503':
          $ref: '#/paths/~1login/post/responses/503'
components:
  schemas:
    SecretValue:
      title: SecretValue
      type: string
      minLength: 11
      maxLength: 128
    UserId:
      type: array
      items:
        title: AccountAddress
        type: string
        description: |-
          The AccountAddress data type is a variable length string with a maximum size of 1023 characters and consists of:
          Alphanumeric characters, upper or lower case. (Addresses are case-sensitive so that they can contain data encoded in formats such as base64url.)
          - Underscore (_) - Tilde (~) - Hyphen (-) - Period (.) Addresses MUST NOT end in a period (.) character
          An entity providing accounts to parties (i.e. a participant) can provide any value for an AccountAddress that is meaningful to that entity. It does not need to provide an address that makes the account identifiable outside the entity's domain.
          IMPORTANT: The policy for defining addresses and the life-cycle of these is at the discretion of the address space owner (the payer DFSP in this case).
          https://github.com/mojaloop/documentation/blob/master/website/versioned_docs/v1.0.1/api/thirdparty/data-models.md#3212-accountaddress
        pattern: '^([0-9A-Za-z_~\-\.]+[0-9A-Za-z_~\-])$'
        minLength: 1
        maxLength: 1023
      minItems: 1
      description: A long-lived unique account identifier provided by the DFSP
    UserName:
      title: UserName
      type: string
      minLength: 1
      maxLength: 25
    Password:
      title: Password
      type: string
      minLength: 1
      maxLength: 25
    Message:
      title: Message
      type: string
      description: OTP value or error message
    DFSPLoginRequest:
      title: DFSPLoginRequest
      type: object
      description: POST /login request
      properties:
        userName:
          $ref: '#/components/schemas/UserName'
        password:
          $ref: '#/components/schemas/Password'
    DFSPAuthorizeRequest:
      title: DFSPAuthorizeRequest
      type: object
      description: POST /authorize request
      properties:
        userId:
          $ref: '#/components/schemas/UserId'
        consentRequestId:
          $ref: '#/components/schemas/SendOTPRequest/properties/consentRequestId'
    DFSPAuthorizeResponse:
      title: DFSPAuthorizeResponse
      type: object
      description: POST /authorize response
      properties:
        secret:
          $ref: '#/components/schemas/SecretValue'
      required:
        - secret
    SendOTPRequest:
      title: SendOTPRequest
      type: object
      description: POST /sendOTP request
      properties:
        userName:
          $ref: '#/components/schemas/UserName'
        consentRequestId:
          title: CorrelationId
          type: string
          pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$'
          description: 'Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).'
          example: b51ec534-ee48-4575-b6a9-ead2955b8069
        message:
          $ref: '#/components/schemas/Message'
      required:
        - userName
        - consentRequestId
        - message
    VerifyOTPorSecretRequest:
      title: VerifyOTPorSecretRequest
      type: object
      description: POST /verifyOTPorSecret request
      properties:
        consentRequestId:
          $ref: '#/components/schemas/SendOTPRequest/properties/consentRequestId'
        value:
          oneOf:
            - $ref: '#/components/schemas/GetOTPorSecretResponse/properties/value/oneOf/0'
            - $ref: '#/components/schemas/SecretValue'
          description: Contains the OTP or Secret value.
      required:
        - consentRequestId
        - value
    GetOTPorSecretResponse:
      title: GetOTPorSecretResponse
      type: object
      description: 'Get /OTPorSecret/{ID} response'
      properties:
        value:
          oneOf:
            - title: OtpValue
              type: string
              pattern: '^\d{3,10}$'
              description: 'The API data type OtpValue is a JSON String of 3 to 10 characters, consisting of digits only. Negative numbers are not allowed. One or more leading zeros are allowed.'
            - $ref: '#/components/schemas/SecretValue'
          description: Contains the OTP or Secret value.
      required:
        - value
    StoreConsent:
      title: StoreConsent
      type: object
      description: store consent details
      properties:
        scopes:
          type: array
          items:
            title: Scope
            type: object
            description: |-
              The Scope element contains an identifier defining, in the terms of a DFSP, an account on which access types can be requested or granted. It also defines the access types which are requested or granted.
              https://github.com/mojaloop/documentation/blob/master/website/versioned_docs/v1.0.1/api/thirdparty/data-models.md#32121-scope
            properties:
              address:
                $ref: '#/components/schemas/UserId/items'
              actions:
                type: array
                minItems: 1
                maxItems: 32
                items:
                  title: ScopeAction
                  type: string
                  description: |
                    The ScopeAction element contains an access type which a PISP can request
                    from a DFSP, or which a DFSP can grant to a PISP.
                    It must be a member of the appropriate enumeration.

                    - ACCOUNTS_GET_BALANCE: PISP can request a balance for the linked account
                    - ACCOUNTS_TRANSFER: PISP can request a transfer of funds from the linked account in the DFSP
                    - ACCOUNTS_STATEMENT: PISP can request a statement of individual transactions on a user's account
                  enum:
                    - ACCOUNTS_GET_BALANCE
                    - ACCOUNTS_TRANSFER
                    - ACCOUNTS_STATEMENT
            required:
              - address
              - actions
      required:
        - scopes
